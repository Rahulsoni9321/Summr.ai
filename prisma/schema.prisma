// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [vector]
}

model User {
    id             String          @id @default(cuid())
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    firstName      String?
    lastName       String?
    emailAddress   String          @unique
    imageUrl       String?
    credits        Int             @default(150)
    userToProjects UserToProject[]
    question       Question[]
}

model Project {
    id             String                @id @default(cuid())
    name           String
    githubUrl      String
    githubToken    String
    updatedAt      DateTime              @updatedAt
    createdAt      DateTime              @default(now())
    deletedAt      DateTime?
    userToProjects UserToProject[]
    commits        Commit[]
    embeddedCode   sourceCodeEmbedding[]
    question       Question[]
    meeting        Meeting[]
}

model sourceCodeEmbedding {
    id               String                      @id @default(cuid())
    fileName         String
    content          String
    summary          String
    summaryEmbedding Unsupported("vector(768)")?
    projectId        String
    project          Project                     @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Question {
    id             String   @id @default(cuid())
    projectId      String
    project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    answer         String
    question       String
    fileReferences Json?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    userId         String
    user           User     @relation(fields: [userId], references: [id])
}

model Meeting {
    id         String     @id @default(cuid())
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt

    meetingUrl String
    status     StatusType @default(PROCESSING)
    
    projectId  String
    project    Project    @relation(fields: [projectId], references: [id])
    issue      Issue[]
}

enum StatusType {
    PROCESSING
    DONE
    ERROR
}

model Issue {
    id            String   @id @default(cuid())
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    headline      String
    start         String
    end           String
    gist          String
    summary       String

    meetingId     String
    meeting       Meeting  @relation(fields: [meetingId], references: [id])
}

model UserToProject {
    id        String  @id @default(cuid())
    userId    String
    projectId String
    user      User    @relation(fields: [userId], references: [id])
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@unique([userId, projectId])
}

model Commit {
    id                 String   @id @default(cuid())
    projectId          String
    project            Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    commitMessage      String
    commitHash         String
    commitAuthorName   String
    commitAuthorAvatar String
    summary            String
}
